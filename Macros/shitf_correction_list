//shift_correction_list macro 

//using Image Stabilizer by Kang Li
//K. Li, "The image stabilizer plugin for ImageJ," http://www.cs.cmu.edu/~kangli/code/Image_Stabilizer.html, February, 2008. 
///////////////////////////////////////////////////////////////////////////////////
/*Copyright (C) 2016  Francisco J. Maza.
* IFIByNE-CONICET/F.C.E.N., Universidad de Buenos Aires
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.*/
////////////////////////////////////////////////////////////////////////////////////
// 1.7 (03/08/2018):	> "zprojects" edited to be explicit average projection
//						> select window command added to explicit select "shift stack" window
// 1.6 (15/04/2016):	> code edition (indentation, unnecessary lines deleted, etc) 
// 1.5 (15/07/2015):	> projection for reference image set to full stack (lines 175 and 188)
// 1.4 (03/06/2015):	> make representative video images with frames before stimulusON (set in list)
// 1.3 (20/04/2015):	> Automatic change the shift values in list.txt, no need for manual copy-paste, no need for shift_list folder
// 1.2 (15/01/2015):	> Checkbox applied for selecting multiple experiments
// 1.1 (30/07/2014):	> added multiple experiments option
// 1.0 (25/06/2014):	> initial version

//**videos from list must have the same size**


macro "shift_correction_list" {
	//Get the folder path 
	String.resetBuffer;
	DIR_PATH=getDirectory("Select your ImageJ_ImagingAnalysis folder"); //ImageJ_ImagingAnalysis folder should contain the following subfolders :
										//data (containing "Experiment" folder with .tif videos);
										//list (containing experiment list created by "create_list macro");
										//coors (containing roi list coors saved using roi managerAS : "ExperimentName.txt");
										//masks (containing roiset.zip saved using roi manager AS : "ExperimentName.txt.zip");
										//data_deltaF (will contain "Experiment" folder with "deltaF" .tif videos);
										//ImageJ_Output (will receive data results from "measure_bleaching_corrected" macro);
	print("\\Clear");
	print("DIR_PATH :"+DIR_PATH);
	
	//Get all Experiments names
	ALL_EXP=getFileList(DIR_PATH+"data_deltaF");
	EXP_ARRAY=newArray(ALL_EXP.length);
	
	// Create experiment array
	for (i=0; i<ALL_EXP.length; i++) {
		LENGTH=lengthOf(ALL_EXP[i]);
		EXP_ARRAY[i]=substring(ALL_EXP[i],0,LENGTH);
		}
	EXP_ARRAY_WITH_NONE=newArray(EXP_ARRAY.length+1);
	NONE_Array=newArray("");
	EXP_ARRAY_WITH_NONE=Array.concat(NONE_Array,EXP_ARRAY);
	
	
	
	defaults = newArray(EXP_ARRAY.length);
	for (i=0; i<EXP_ARRAY.length; i++) {
		defaults[i] = false;
		}
	if (EXP_ARRAY.length>10) {
		rows = 10;
		columns = (EXP_ARRAY.length+10)/10;
		}
	if (EXP_ARRAY.length<=10){
		rows= EXP_ARRAY.length+1;
		columns = 1;
		}
			
	n_checkboxes = rows*columns;
	Dialog.create("Choose Experiment");
	Dialog.addCheckboxGroup(rows,columns,EXP_ARRAY,defaults);
	Dialog.show();

	EXP_ARRAY_SELECTION=newArray(EXP_ARRAY.length);
	for (s=0;s<EXP_ARRAY.length;s++){
		if (Dialog.getCheckbox()==true) EXP_ARRAY_SELECTION[s]=EXP_ARRAY[s];
		else EXP_ARRAY_SELECTION[s]="";
		}
	
	EXP_ARRAY_SELECTION_sorted=Array.copy(EXP_ARRAY_SELECTION); // this is the array for the expeiments selected to be analized, sorted up-down
	Array.sort(EXP_ARRAY_SELECTION_sorted);
	Array.reverse(EXP_ARRAY_SELECTION_sorted);
		
	/*--------------------------------------------------------------------------------*/
	for (d=0;d<EXP_ARRAY_SELECTION_sorted.length;d++){	//start loop for selected MULTIPLE experiments
		if (EXP_ARRAY_SELECTION_sorted[d]=="") {
			//setBatchMode("exit and display");
			showStatus("Finished");
			// Creation of the finished dialog box
			Dialog.create("shift correction list");
			Dialog.addMessage("Finished");
			Dialog.show();
			exit;
			}
		else {
	
			//EXP_NAME=Dialog.getChoice();
			EXP_NAME=EXP_ARRAY_SELECTION_sorted[d];
			EXP_N=substring(EXP_NAME,0,lengthOf(EXP_NAME)-1);
			EXP=substring(EXP_NAME,0,lengthOf(EXP_NAME)-8);
			
			// Get all file names
			ALL_NAMES=getFileList(DIR_PATH+"data_deltaF/"+EXP_NAME);
			ALL_EXT=newArray(ALL_NAMES.length);
			// Create extensions array
			for (i=0; i<ALL_NAMES.length; i++) {
				LENGTH=lengthOf(ALL_NAMES[i]);
				ALL_EXT[i]=substring(ALL_NAMES[i],LENGTH-4,LENGTH);
				}
			
			// Loop on all files
			
			/*--------------------------------------------------------------------------------------*/
			//Opening list Results table
			LIST_DIR= DIR_PATH +"list/"+EXP_N+"_list"+".txt";	//experiment list location
			
			//List Arrays for reading variables
			filestring=File.openAsString(LIST_DIR);
			rows=split(filestring, "\n");
			videoNumber_LIST=newArray(rows.length);
			VIDEO_LIST=newArray(rows.length);
			BIN_LIST=newArray(rows.length);
			StimulusON_LIST=newArray(rows.length);
			StimulusOFF_LIST=newArray(rows.length);
			Stimulus2ON_LIST=newArray(rows.length);
			Stimulus2OFF_LIST=newArray(rows.length);
			ROILIST_LIST=newArray(rows.length);
			xShift_LIST=newArray(rows.length);
			yShift_LIST=newArray(rows.length);
			framestoexcl_LIST=newArray(rows.length);
					
			//make list arrays
			for(i=1; i<rows.length; i++) {
				columns=split(rows[i],"\t");
				videoNumber_LIST[i]=i;
				VIDEO_LIST[i]=columns[2];
				BIN_LIST[i]=columns[3];
				StimulusON_LIST[i]=columns[4];
				StimulusOFF_LIST[i]=columns[5];
				Stimulus2ON_LIST[i]=columns[6];
				Stimulus2OFF_LIST[i]=columns[7];
				ROILIST_LIST[i]=columns[8];
				xShift_LIST[i]=columns[9];
				yShift_LIST[i]=columns[10];
				framestoexcl_LIST[i]=columns[11];
				}
			Array.print(StimulusON_LIST);
			
			/*-----------------------------------------------------------------------------------------------------*/
			//Start For loop for VIDEO_LIST
			for (v=1; v<VIDEO_LIST.length; v++) {
			
				
				// Get the file path and name
				FILE_PATH=DIR_PATH+"data_deltaF/"+EXP_NAME+VIDEO_LIST[v];
				FILE_NAME=File.getName(FILE_PATH);
				FILE_NAME_LENGTH=lengthOf(FILE_NAME);
				FILE_SHORTNAME=substring(FILE_NAME,0,FILE_NAME_LENGTH-4);
					
				print("");	
				print("FILE_PATH:", FILE_PATH);
				print("FILE_NAME:", FILE_NAME);	
				print("FILE_SHORTNAME:", FILE_SHORTNAME);	
							
				//set variables from list arrays
				videoNumber=videoNumber_LIST[v];
				bin=BIN_LIST[v];
				VIDEO=VIDEO_LIST[v];
				StimulusON=StimulusON_LIST[v];
				StimulusOFF=StimulusOFF_LIST[v];	
				start_basal=(StimulusON)-5;
				stop_basal=(StimulusON)-1;
				xShift=xShift_LIST[v];
				yShift=yShift_LIST[v];
				framestoexcl=framestoexcl_LIST[v];
				rois=ROILIST_LIST[v];
				open(FILE_PATH);
					
				setBatchMode(true);	//run faster, avoid opening images
					
					if (videoNumber==1) {	//for first video
						run ("32-bit");
						rename("fullstack");
						//run("Median...", "radius=1 stack");//run("Gaussian Blur...", "sigma=0.70 stack");
						//run("Median 3D...", "x=0 y=0 z=1"); //3 frames (z-1; z; z+1)
						run("Z Project...", "start=1 stop="+nSlices+" projection=[Average Intensity]");//run("Z Project...", "start=start_basal stop=stop_basal");  //basal activity frames to be averaged for movement correction just before stimulus
						run ("32-bit");
						shift_vid= "vid_"+videoNumber;
						rename(shift_vid);
						selectWindow("fullstack");
						close();
						selectWindow(shift_vid);
						rename ("shift_stack");
						}
					if (videoNumber>1) { //for the following videos, "that will be added to the first one"
						run ("32-bit");
						rename("fullstack");
						//run("Median...", "radius=1 stack");//run("Gaussian Blur...", "sigma=0.70 stack");
						//run("Median 3D...", "x=0 y=0 z=1"); //3 frames (z-1; z; z+1)
						run("Z Project...", "start=1 stop="+nSlices+" projection=[Average Intensity]");//run("Z Project...", "start=start_basal stop=stop_basal");  //basal activity frames to be averaged for movement correction
						run ("32-bit");
						shift_vid= "vid_"+videoNumber;
						rename(shift_vid);
						selectWindow("fullstack");
						close();
						selectWindow(shift_vid);
						run("Copy");
						close();
						selectWindow("shift_stack");
						run("Add Slice");
						run("Paste");
						}
									
				}	//end of For loop videosselectWindow("shift_stack");
					
			setSlice(1);
			save(DIR_PATH+"list/"+EXP_N+"_forshift.tif");
			setBatchMode(false);
			
			/*------------------------------------------------------------------------------------*/		
			// Run StackReg to "shift_stack" ****stack reg is not a good option sometimes, seems to depend on pixel intensity***
				
				// ****the following does not work because "Translation Trajectory" is not a Plot, it is an image window
				//run("StackRegJ_", "transformation=Translation output_trans_trajectory");
				/*selectWindow("Translation Trajectory");
				Plot.getValues(x,y); 
	 			for (c=0; c<x.length; c++){
	      			print(x[c], y[c]);
	 			}*/
			/*---------------------------------------------------------------------------------------------*/
		
			//run "Image Stabilizer plugin" and create shift list for rois
			run("Image Stabilizer", "transformation=Translation maximum_pyramid_levels=1 template_update_coefficient=0.90 maximum_iterations=200 error_tolerance=0.0000001 log_transformation_coefficients output_to_a_new_stack");
			close();
			selectWindow("shift_stack.log");
			saveAs("Text",DIR_PATH+"list/"+EXP_N+"_shiftListtemp.txt");
			selectWindow(EXP_N+"_shiftListtemp.txt");
			close();
			
			/*---------------------------------------------------------------------------------------------*/
					
			//open txt as string and save list
			//String.resetBuffer;	
			list_file_dir= DIR_PATH +"list/"+EXP_N+"_list.txt";
			run("Results... ", "open=list_file_dir");
			filestring=File.openAsString(DIR_PATH+"list/"+EXP_N+"_shiftListtemp.txt");
			rows=split(filestring, "\n");
			VideoNumber=newArray(rows.length);
			xshift=newArray(rows.length);
			yshift=newArray(rows.length);
					
			//modify the x and y shift values in list and save it again
			for(i=2; i<rows.length; i++) {
				columns=split(rows[i],",");
				VideoNumber[i]=columns[0];
				xshift[i]=parseFloat(columns[2]);
				yshift[i]=parseFloat(columns[3]);
				row= i-2;
				//setResult("Video",row,VideoNumber[i]);
				setResult("xShift",row,xshift[i]);
				setResult("yShift",row,yshift[i]);
				}
			updateResults();
			selectWindow("Results");
			
			//save(DIR_PATH+"shift_list/"+EXP_N+".txt");
			save(DIR_PATH +"list/"+EXP_N+"_list.txt");
			File.delete(DIR_PATH+"list/"+EXP_N+"_shiftListtemp.txt");
			
			}
		
		}	//end of loop for MULTIPLE EXPERIMENTS	
	
	//setBatchMode("exit and display");
	showStatus("Finished");
	// Creation of the finished dialog box
	Dialog.create("shift correction list");
	Dialog.addMessage("Finished");
	Dialog.show();
	
	}	//end of macro
